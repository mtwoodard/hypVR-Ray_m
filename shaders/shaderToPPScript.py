from sys import argv
import string 

script = argv[0]
filename = argv[1]
outputName = argv[2]

def compareStrings(s1, s2):
    return s1.translate(dict.fromkeys(map(ord, string.whitespace))) == s2.translate(dict.fromkeys(map(ord,string.whitespace)))

def getName(line):
    reversedName = ''
    isArray = False
    for c in reversed(line.rstrip()):
        if c == ';':
            pass
        elif c == ']':
            isArray = True
        elif c == '[':
            isArray = False
        elif c == ' ':
            break
        elif not(isArray):
            reversedName += c
    return "".join(reversed(reversedName))


def parseUniformInfo(line):
    info = []
    typed = ''
    name = ''
    value = ''
    if line.find('mat4') >= 0:
        typed = 'm4'
        value = 'new THREE.Matrix4()' 
    elif line.find('vec4') >= 0:
        typed = 'v4'
        value = 'new THREE.Vector4()' 
    elif line.find('vec3') >= 0:
        typed = 'v3'
        value = 'new THREE.Vector3()'
    elif line.find('vec2') >= 0:
        typed = 'v2'
        value = 'new THREE.Vector2()'
    elif line.find('float') >= 0:
        typed = 'f'
        value = '0.0'
    elif line.find('int') >= 0:
        typed = 'i'
        value = '0'
    elif line.find('sampler2D') >= 0:
        typed = 't'
        value = 'null'

    if line.find('[') >= 0:
        typed += 'v'
        value = '[]'
    
    name = getName(line)

    info.append(name)
    info.append(typed)
    info.append(value)
    return info

isVertex = False
isFragment = False
uniforms = []
vertex = []
fragment = []

#Parse through file
with open(filename) as file:
    for line in file:
        if line.isspace():
            continue
        elif compareStrings(line, 'BEGIN VERTEX'):
            isVertex = True
        elif compareStrings(line, 'END VERTEX'): 
            isVertex = False
        elif compareStrings(line, 'BEGIN FRAGMENT'): 
            isFragment = True
        elif compareStrings(line, 'END FRAGMENT'):
            isFragment = False
        elif isVertex:
            if line.find('uniform') >= 0: #check if line is uniform declaration
                uniforms.append(parseUniformInfo(line))
            vertex.append(line)
        elif isFragment:
            if line.find('uniform') >= 0: #check if line is uniform declaration
                uniforms.append(parseUniformInfo(line))
            fragment.append(line)

#Quotes text in a string - keeps code cleaner        
def quoteString(text):
    return f'"{text}"'

def writeUniforms(file):
    for i in range(len(uniforms)):
        file.write(quoteString(uniforms[i][0]) + ':     {type:'+quoteString(uniforms[i][1])+', value:'+uniforms[i][2]+'},\n')

def writeShader(file, shader):
    for line in shader:
        file.write(quoteString(line.rstrip())+',\n')


#Begin writing to new JS file
output = open(outputName+'.js', 'w')

output.write('/**\n')
output.write('* This file was generated by the shaderToPPScript tool\n')
output.write('*/\n')
output.write('\n')
output.write('THREE.'+outputName+' = {\n')
output.write('\n')
output.write('uniforms: {\n')
writeUniforms(output)
output.write('},\n')
output.write('\n')
output.write('vertexShader: [\n')
output.write('\n')
writeShader(output, vertex)
output.write('\n')
output.write('].join( "\\n" ),\n')
output.write('\n')
output.write('fragmentShader: [\n')
output.write('\n')
writeShader(output, fragment)
output.write('\n')
output.write('].join( "\\n" )\n')
output.write('\n')
output.write('};\n')

output.close()